*terminator
# 标识符
id
# 整数
integer
# 字符
character
# 浮点数
real
( 
)
[
]
,
;
{
}
=
:
>
<
>=
<=
!=
==
=
+=
-=
*=
/=
+
-
*
/
%
&&
||
++
--
!
# 关键字
int
float
boolean
char
while
if 
else
do
return
struct
true
false
*production
# 开始
program -> external_declaration
Program -> program external_declaration
external_declaration -> function_definition
external_declaration -> declaration
# 声明语句
declaration -> declaration_specifiers ;
declaration -> declaration_specifiers init_declarator_list ;
declaration_specifiers -> type_specifier
type_specifier -> int
type_specifier -> float
type_specifier -> boolean
type_specifier -> char
type_specifier -> struct_specifier
#结构体
struct_specifier -> struct id { struct_declaration_list }
struct_specifier -> struct { struct_declaration_list }
struct_specifier -> struct id
struct_declaration_list -> struct_declaration
struct_declaration_list -> struct_declaration_list struct_declaration
struct_declaration -> type_specifier struct_declarator_list
struct_declarator_list -> struct_declarator
struct_declarator_list -> struct_declarator_list , struct_declarator
struct_declarator -> declarator
struct_declarator -> : constant_expression
struct_declarator -> declarator : constant_expression
#
init_declarator_list -> init_declarator
init_declarator_list -> init_declarator_list , init_declarator
init_declarator -> declarator
init_declarator -> declarator = initializer
declarator -> direct_declarator
direct_declarator -> id
direct_declarator -> ( declarator )
direct_declarator -> direct_declarator [ constant_expression ]
direct_declarator -> direct_declarator [ ]
direct_declarator -> direct_declarator ( parameter_list )
direct_declarator -> direct_declarator ( identifier_list )
direct_declarator -> direct_declarator ( )
# id列表
identifier_list -> id
identifier_list -> identifier_list , id
# 形参列表
parameter_list -> parameter_declaration
parameter_list -> parameter_list , parameter_declaration
parameter_declaration -> declaration_specifiers declarator
parameter_declaration -> declaration_specifiers
#parameter_declaration -> declaration_specifiers abstract_declarator
# 抽象参数，没有参数名
#abstract_declarator -> direct_abstract_declarator
#direct_abstract_declarator -> ( abstract_declarator )
#direct_abstract_declarator -> [ ]
#direct_abstract_declarator -> [ constant_expression ]
#direct_abstract_declarator -> direct_abstract_declarator [ ]
#direct_abstract_declarator -> ( )
#direct_abstract_declarator -> ( parameter_list )
#direct_abstract_declarator -> direct_abstract_declarator ( parameter_list )
# 初始化文法
initializer -> assignment_expression
initializer -> { initializer_list }
initializer -> { initializer_list , }
initializer_list -> initializer
initializer_list -> initializer_list , initializer
constant_expression -> conditional_expression
declaration_list -> declaration
declaration_list -> declaration_list declaration
# 函数定义
# int func1(int a, int b) {a=1,b=2}
function_definition -> declaration_specifiers declarator compound_statement
function_definition -> declarator  declaration_list compound_statement
function_definition -> declarator compound_statement
# 程序块
compound_statement -> { }
compound_statement -> { statement_list }
compound_statement -> { declaration_list }
compound_statement -> { declaration_list statement_list }
statement -> compound_statement
statement -> selection_statement
statement -> iteration_statement
statement -> expression_statement
statement_list -> statement
statement_list -> statement_list statement
# 选择语句
selection_statement -> if ( expression ) statement
selection_statement -> if ( expression ) statement else statement
# 迭代语句
iteration_statement -> while ( expression ) statement
iteration_statement -> do statement while ( expression ) ;
# 表达式
expression_statement -> ;
expression_statement -> expression ;
expression -> assignment_expression
expression -> expression , assignment_expression
# 赋值表达式
assignment_expression -> unary_expression assignment_operator assignment_expression
assignment_expression -> conditional_expression
# 赋值符号
assignment_operator -> =
assignment_operator -> +=
assignment_operator -> -=
assignment_operator -> *=
assignment_operator -> /=
# 条件表达式
conditional_expression -> logical_or_expression
logical_or_expression -> logical_or_expression || logical_and_expression
logical_or_expression -> logical_and_expression
logical_and_expression -> logical_and_expression && equality_expression
logical_and_expression -> equality_expression
#
equality_expression -> equality_expression == relation_expression
equality_expression -> equality_expression != relation_expression
equality_expression -> relation_expression

relation_expression -> relational_expression > additive_expresion
relation_expression -> relational_expression < additive_expresion
relation_expression -> relational_expression >= additive_expresion
relation_expression -> relational_expression <= additive_expresion
#
additive_expresion -> additive_expresion + multiplicative_expression
additive_expresion -> additive_expresion - multiplicative_expression
additive_expresion -> multiplicative_expression
multiplicative_expression -> unary_expression
multiplicative_expression -> multiplicative_expression * unary_expression
multiplicative_expression -> multiplicative_expression / unary_expression
multiplicative_expression -> multiplicative_expression % unary_expression
#cast_expression -> unary_expression
#cast_expression -> ( type_name ) cast_expression
#type_name -> type_specifier
#type_name -> type_specifier abstract_declarator
############ type_name
# 一元表达式
unary_expression -> postfix_expression
unary_expression -> ++ postfix_expression
unary_expression -> -- postfix_expression
unary_expression -> unary_operator unary_expression
unary_operator -> +
unary_operator -> -
unary_operator -> !
# 后缀
postfix_expression -> primary_expression
postfix_expression -> postfix_expression [ expression ]
postfix_expression -> postfix_expression ( )
postfix_expression -> postfix_expression ( argument_expression_list )
postfix_expression -> postfix_expression ++
postfix_expression -> postfix_expression --
argument_expression_list -> assignment_expression
argument_expression_list -> argument_expression_list , assignment_expression
# 基本
primary_expression -> id
primary_expression -> real
primary_expression -> integer
primary_expression -> character
primary_expression -> ( expression )
*startSym
program


