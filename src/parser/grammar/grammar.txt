*terminator
# 标识符
id
# 整数
integer
# 字符
character
# 浮点数
real
(
)
[
]
,
.
;
{
}
=
:
>
<
>=
<=
!=
==
=
+=
-=
*=
/=
+
-
*
/
%
&&
||
++
--
!
# 关键字
int
float
boolean
void
char
while
if
else
do
return
struct
true
false
*production
# 开始
program -> external_declaration
program -> program external_declaration
external_declaration -> function_definition
external_declaration -> declaration
# 声明语句
declaration_list -> declaration
declaration_list -> declaration_list declaration
declaration -> type_specifier ;
declaration -> type_specifier init_declarator_list ;
# 变量类型
type_specifier -> int
type_specifier -> float
type_specifier -> boolean
type_specifier -> char
type_specifier -> void
type_specifier -> struct_specifier
#结构体
struct_specifier -> struct id { struct_declaration_list }
struct_specifier -> struct { struct_declaration_list }
struct_specifier -> struct id
struct_declaration_list -> struct_declaration
struct_declaration_list -> struct_declaration_list struct_declaration
struct_declaration -> type_specifier var_declarator ;
#
init_declarator_list -> init_declarator
init_declarator_list -> init_declarator_list , init_declarator

init_declarator -> var_declarator
init_declarator -> var_declarator = conditional_expression
# 普通变量和数组
var_declarator -> id
var_declarator -> var_declarator [ integer ]
# 函数
function_definition -> type_specifier func_declarator compound_statement
func_declarator -> id ( parameter_list )
func_declarator -> id ( )
# 函数参数
parameter_declaration -> type_specifier var_declarator
parameter_list -> parameter_declaration
parameter_list -> parameter_list , parameter_declaration
# 程序块
compound_statement -> { }
compound_statement ->  { statement_list }
compound_statement ->  { declaration_list }
compound_statement ->  { declaration_list statement_list }
statement -> compound_statement
statement -> selection_statement
statement -> iteration_statement
statement -> expression_statement
statement -> jump_statement
statement_list -> statement
statement_list -> statement_list  statement
# jump语句
jump_statement -> return expression ;
jump_statement -> return ;
# 选择语句
# 文法具有二义性,可以手动消除二义性
selection_statement -> if  ( expression )  statement
selection_statement -> if  ( expression )  statement  else  statement
# 迭代语句
iteration_statement -> while  ( expression )  statement
iteration_statement -> do  statement while  ( expression ) ;
# 表达式
# expression_statement -> ;
expression_statement -> expression ;
expression -> assignment_expression
expression -> expression , assignment_expression
# 赋值表达式
assignment_expression -> conditional_expression
assignment_expression -> unary_expression = assignment_expression
# 赋值符号
# assignment_operator -> =
# assignment_operator -> +=
# assignment_operator -> -=
# assignment_operator -> *=
# assignment_operator -> /=
# 条件表达式
conditional_expression -> logical_or_expression
logical_or_expression -> logical_and_expression
logical_or_expression -> logical_or_expression ||  logical_and_expression
logical_and_expression -> equality_expression
logical_and_expression -> logical_and_expression &&  equality_expression
#
equality_expression -> relational_expression
equality_expression -> equality_expression == relational_expression
equality_expression -> equality_expression != relational_expression
#
relational_expression -> additive_expression
relational_expression -> relational_expression > additive_expression
relational_expression -> relational_expression < additive_expression
relational_expression -> relational_expression >= additive_expression
relational_expression -> relational_expression <= additive_expression
#
additive_expression -> multiplicative_expression
additive_expression -> additive_expression + multiplicative_expression
additive_expression -> additive_expression - multiplicative_expression
multiplicative_expression -> unary_expression
multiplicative_expression -> multiplicative_expression * unary_expression
multiplicative_expression -> multiplicative_expression / unary_expression
multiplicative_expression -> multiplicative_expression % unary_expression
# 一元表达式
unary_expression -> postfix_expression
unary_expression -> ++ postfix_expression
unary_expression -> -- postfix_expression
unary_expression -> unary_operator unary_expression
unary_operator -> +
unary_operator -> -
unary_operator -> !
# 后缀
postfix_expression -> primary_expression
postfix_expression -> postfix_expression [ expression ]
postfix_expression -> id ( )
postfix_expression -> id ( argument_expression_list )
postfix_expression -> postfix_expression ++
postfix_expression -> postfix_expression --
postfix_expression -> postfix_expression . id
argument_expression_list -> assignment_expression
argument_expression_list -> argument_expression_list , assignment_expression
# 基本
primary_expression -> id
primary_expression -> real
primary_expression -> integer
primary_expression -> character
primary_expression -> true
primary_expression -> false
primary_expression -> ( expression )
*startSym
program