*terminator
# 标识符
id
# 整数
integer
# 字符
character
# 浮点数
real
(
)
[
]
,
;
{
}
=
:
>
<
>=
<=
!=
==
=
+=
-=
*=
/=
+
-
*
/
%
&&
||
++
--
!
# 关键字
int
float
boolean
void
char
while
if
else
do
return
struct
true
false
*production
# 开始
program -> external_declaration
program -> program external_declaration
external_declaration -> function_definition
external_declaration -> declaration
# 声明语句
declaration -> type_specifier ; %% declaration1
declaration -> type_specifier init_declarator_list ; %% declaration2
type_specifier -> int %% type_specifier1
type_specifier -> float %% type_specifier2
type_specifier -> boolean %% type_specifier3
type_specifier -> char %% type_specifier4
type_specifier -> void %% type_specifier5
type_specifier -> struct_specifier
#结构体
struct_specifier -> struct id { struct_declaration_list }
struct_specifier -> struct { struct_declaration_list }
struct_specifier -> struct id
struct_declaration_list -> struct_declaration
struct_declaration_list -> struct_declaration_list struct_declaration
struct_declaration -> type_specifier struct_declarator_list ;
struct_declarator_list -> struct_declarator
struct_declarator_list -> struct_declarator_list , struct_declarator
struct_declarator -> declarator
#
init_declarator_list -> init_declarator
init_declarator_list -> init_declarator_list , init_declarator
init_declarator -> declarator %% init_declarator1
init_declarator -> declarator = initializer %% init_declarator2
declarator -> direct_declarator
direct_declarator -> id %% direct_declarator1
direct_declarator -> direct_declarator [ constant_expression ] %% direct_declarator2
direct_declarator -> direct_declarator ( parameter_list )
direct_declarator -> direct_declarator ( ) %% m3
# 不在使用direct_declarator后面的m3
# 形参列表
parameter_list -> parameter_declaration
parameter_list -> parameter_list , parameter_declaration
parameter_declaration -> type_specifier declarator
# 函数定义
function_definition -> type_specifier declarator compound_statement %% function_definition1
# 变量初始化
initializer -> assignment_expression
# 单元素数组
constant_expression -> conditional_expression
declaration_list -> declaration
declaration_list -> declaration_list declaration %% declaration_list2
# 程序块
M5 -> %% m5
compound_statement -> { }
compound_statement -> M5 { statement_list } %% compound2
compound_statement -> M5 { declaration_list } %% compound2
compound_statement -> M5 { declaration_list statement_list } %% compound4
statement -> compound_statement
statement -> selection_statement
statement -> iteration_statement
statement -> expression_statement
statement -> jump_statement
statement_list -> statement
# statement_list -> statement_list M6 statement %% statement_list2 这里m6规约有问题
statement_list -> statement_list statement %% statement_list2
jump_statement -> return expression ; %% jump1
jump_statement -> return ; %% jump2
# 选择语句
# 文法具有二义性,可以手动消除二义性，m6 读取下一行 m7 m9指明是控制流 m10=m6+m9
M6 ->  %% m6
M7 ->  %% m7
M9 ->  %% m9
M10 -> %% m10
selection_statement -> if M9 ( expression ) M6 statement %% selection1
# selection_statement -> if M9 ( expression ) M6 statement M7 else M6 statement %% selection2 M7规约有问题
selection_statement -> if M9 ( expression ) M6 statement else M6 statement %% selection2
# 迭代语句
iteration_statement -> while M10 ( expression ) M6 statement %% iteration1
iteration_statement -> do M6 statement while M9 ( expression ) ; %% iteration2
# 表达式
expression_statement -> ; %% expressionS1
expression_statement -> expression ; %% expressionS2
expression -> assignment_expression
expression -> expression , assignment_expression
# 赋值表达式
assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression %% assignment2
# 赋值符号
assignment_operator -> = %% assignmentOp1
assignment_operator -> += %% assignmentOp2
assignment_operator -> -= %% assignmentOp3
assignment_operator -> *= %% assignmentOp4
assignment_operator -> /= %% assignmentOp5
# 条件表达式
M8 -> %% m8
conditional_expression -> logical_or_expression
logical_or_expression -> logical_and_expression
logical_or_expression -> logical_or_expression || M8 logical_and_expression %% logical_or2
logical_and_expression -> equality_expression
logical_and_expression -> logical_and_expression && M8 equality_expression %% logical_and2
#
equality_expression -> relational_expression
equality_expression -> equality_expression == relational_expression %% equality2
equality_expression -> equality_expression != relational_expression %% equality3
#
relational_expression -> additive_expression
relational_expression -> relational_expression > additive_expression %% relation2
relational_expression -> relational_expression < additive_expression %% relation3
relational_expression -> relational_expression >= additive_expression %% relation4
relational_expression -> relational_expression <= additive_expression %% relation5
#
additive_expression -> multiplicative_expression
additive_expression -> additive_expression + multiplicative_expression %% additive2
additive_expression -> additive_expression - multiplicative_expression %% additive3
multiplicative_expression -> unary_expression
multiplicative_expression -> multiplicative_expression * unary_expression %% multiplicative2
multiplicative_expression -> multiplicative_expression / unary_expression %% multiplicative3
multiplicative_expression -> multiplicative_expression % unary_expression %% multiplicative4
# 一元表达式
unary_expression -> postfix_expression
unary_expression -> ++ postfix_expression %% unary2
unary_expression -> -- postfix_expression %% unary3
unary_expression -> unary_operator unary_expression %% unary4
unary_operator -> + %% unaryOp1
unary_operator -> - %% unaryOp2
unary_operator -> ! %% unaryOp3
# 后缀
postfix_expression -> primary_expression
postfix_expression -> postfix_expression [ expression ] %% postfix2
postfix_expression -> postfix_expression ( ) %% postfix3
postfix_expression -> postfix_expression ( argument_expression_list ) %% postfix4
postfix_expression -> postfix_expression ++ %% postfix5
postfix_expression -> postfix_expression -- %% postfix6
argument_expression_list -> assignment_expression %% argument_expression1
argument_expression_list -> argument_expression_list , assignment_expression %% argument_expression2
# 基本
primary_expression -> id %% primaryId
primary_expression -> real %% primaryReal
primary_expression -> integer %% primaryInteger
primary_expression -> character %% primaryCharacter
primary_expression -> true %% primaryTrue
primary_expression -> false %% primaryFalse
# primary_expression -> string
primary_expression -> ( expression )
*startSym
program